import clickhouse_connect
import pandas as pd
from datetime import datetime, timedelta
import psycopg2
import telebot
from telebot import util
from airflow.utils.state import State


class Alert_update_data_in_postgres:
    """
    –ö–ª–∞—Å—Å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∞–ª–µ—Ä—Ç–∏–Ω–≥–∞ –¥–æ–±–∞–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """

    def __init__(self, dict_click_cred: dict, dict_postgre_cred: dict, bot_token: str):
        """
        :param dict_click_cred: —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ ClickHouse
        :param dict_postgre_cred: —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ PostgreSql
        :param bot_token: —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç—ã
        """

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ ClickHouse
        self.click_house_client = clickhouse_connect.get_client(host=dict_click_cred['host'],
                                                                port=dict_click_cred['port'],
                                                                username=dict_click_cred['user'],
                                                                password=dict_click_cred['password'],
                                                                database=dict_click_cred['database'])
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ PostgreSql
        self.sqlalchemy_con = psycopg2.connect(user=dict_postgre_cred['user'],
                                               password=dict_postgre_cred['password'],
                                               host=dict_postgre_cred['host'],
                                               port=dict_postgre_cred['port'],
                                               database=dict_postgre_cred['database'])

        self.bot_token = bot_token

    @staticmethod
    def sourse_write(list_date: list[datetime.date, None], logical_date: datetime.date) -> str:
        """
        –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è –Ω–∞ –≤—Ö–æ–¥ —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏ –ª–æ–≥–∏—á–µ—Å–∫—É—é –¥–∞—Ç—É –∑–∞–ø—É—Å–∫–∞ DAG
        –æ—Ç–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ä–∞–∑–Ω–æ—Å—Ç—å logical_date - list_date[0] == 1
        :param list_date: —Å–ø–∏—Å–æ–∫ —Å –¥–∞—Ç–∞–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–ª–∏ None, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –Ω–µ—Ç
        :param logical_date: –ª–æ–≥–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞ DAG
        :return: —Å—Ç—Ä–æ–∫–∞ —Å—Ç–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        dict_need_source = {source: logical_date - date for date, source in
                            zip(list_date, ['comtrade', 'itc', 'customs'])
                            if date is not None}

        return ', '.join([k for k, v in dict_need_source.items() if v == timedelta(days=1)])

    def year_update(self, **kwargs):
        """
        # –§—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–∞—Ç–∞–º–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –¥–ª—è –ì–æ–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        ## –ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è:
        {
            '–î–µ–º–æ–∫—Ä–∞—Ç–∏—á–µ—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–Ω–≥–æ*2015': 'itc',
            '–î–æ–º–∏–Ω–∏–∫–∞–Ω–∞*2016': 'itc'
        }

        :param kwargs: –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ Dag run
        :return: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏—á–µ–≥–æ, –Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ xcom –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        """
        dict_json = {}
        # logical_date = datetime.strptime(kwargs['ds'], '%Y-%m-%d').date()
        date_now = datetime.now().date()
        df_year_update = pd.read_sql(f"""SELECT name_rus, year, c_upd, i_upd, m_upd 
                                                 FROM ss.sources_updates 
                                                 WHERE '{date_now}' - c_upd = 1 
                                                 OR '{date_now}' - i_upd = 1 
                                                 OR '{date_now}' - m_upd = 1""", con=self.sqlalchemy_con,
                                     dtype={'year': 'str'})

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        df_year_update['source'] = df_year_update[['c_upd', 'i_upd', 'm_upd']].apply(
            lambda x: self.sourse_write(x, date_now), axis=1)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–æ–¥ –ø–æ –ø–∞—Ç–µ—Ä–Ω—É *2024 –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–ø–ª–∏—Ç–æ–≤–∞–Ω–∏—è
        df_year_update['year'] = df_year_update.year.apply(lambda x: '*' + x)

        for country, year, source in zip(df_year_update.name_rus, df_year_update.year, df_year_update.source):
            dict_json[country + year] = source

        kwargs['ti'].xcom_push(value=dict_json, key='year_update')

    def month_update(self, **kwargs):
        """
        # –§—É–Ω–∫—Ü–∏—è —Å–æ–±–∏—Ä–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–∞—Ç–∞–º–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∞–º –¥–ª—è –ú–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

        ## –ü—Ä–∏–º–µ—Ä —Å–ª–æ–≤–∞—Ä—è:
        {
            '–ì–µ—Ä–º–∞–Ω–∏—è*2024-04': 'comtrade',
            '–Ø–ø–æ–Ω–∏—è*2024-05': 'comtrade'
        }

        :param kwargs: –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ Dag run
        :return: —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–∏—á–µ–≥–æ, –Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ xcom –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        """
        dict_json = {}
        # logical_date = datetime.strptime(kwargs['ds'], '%Y-%m-%d').date()
        date_now = datetime.now().date()

        df_month_update = pd.read_sql(f"""SELECT name_rus, period, c_upd, i_upd, m_upd 
                                         FROM ss.sources_updates_m 
                                         WHERE '{date_now}' - c_upd = 1 
                                         OR '{date_now}' - i_upd = 1 
                                         OR '{date_now}' - m_upd = 1""", con=self.sqlalchemy_con,
                                      parse_dates={'period': '%Y-%m-%d'})

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        df_month_update['source'] = df_month_update[['c_upd', 'i_upd', 'm_upd']].apply(
            lambda x: self.sourse_write(x, date_now), axis=1)
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ –ø–∞—Ç–µ—Ä–Ω—É *2024-04 –¥–ª—è –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫ –∏ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–ø–ª–∏—Ç–æ–≤–∞–Ω–∏—è
        df_month_update['period'] = df_month_update.period.apply(lambda x: '*' + x.strftime('%Y-%m'))

        for country, period, source in zip(df_month_update.name_rus, df_month_update.period, df_month_update.source):
            dict_json[country + period] = source

        kwargs['ti'].xcom_push(value=dict_json, key='month_update')

    def get_need_chat_id(self, alert_id: int) -> list[int]:
        """
        –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–±–æ—Ä —á–∞—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        :param alert_id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫—Ç–æ—Ä–∞ –∞–ª–µ—Ä—Ç–∞
        :return: —Å–ø–∏—Å–æ–∫ —Å chat_id
        """
        with self.sqlalchemy_con.cursor() as cur:
            cur.execute("""SELECT chat_id FROM bot.alert_status WHERE status_alert = True AND alert_id = %s""",
                        (alert_id,))
            list_need_chat_id = [chat_id[0] for chat_id in cur.fetchall()]
        return list_need_chat_id

    def alert_success(self, task_ids: str, key_xcom: str, **kwargs):
        """
        –ê–ª–µ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –º–µ—Å—è—á–Ω—ã—Ö –∏–ª–∏ –≥–æ–¥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î Postgre

        :param task_ids: id —Ç–∞—Å–∫–∞ –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–±–∏—Ä–∞–ª—Å—è –Ω—É–∂–Ω—ã–π –Ω–∞–º —Å–ª–æ–≤–∞—Ä—å (–≥–æ–¥ –∏–ª–∏ –º–µ—Å—è—Ü)
        :param key_xcom: –∫–ª—é—á xcom –≤ –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –∑–∞–ø–∏—Å–∞–Ω —Å–ª–æ–≤–∞—Ä—å
        :param kwargs: –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ dag_run
        :return:
        """
        header_text = f"üóÇ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ {'–º–µ—Å—è—á–Ω—ã–µ' if 'month' in key_xcom else '–≥–æ–¥–æ–≤—ã–µ'} –¥–∞–Ω–Ω—ã–µ –≤–Ω–µ—à–Ω–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:\n"
        dict_text_alert = kwargs['ti'].xcom_pull(task_ids=task_ids, key=key_xcom)
        split_alert_message = ''

        for key, source in dict_text_alert.items():
            country, date = key.split('*')
            split_alert_message += f"{country} {'–∑–∞ –ø–µ—Ä–∏–æ–¥ ' + date if 'month' in key_xcom else date + ' –≥–æ–¥'}, –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {source}\n"

        bot = telebot.TeleBot(self.bot_token)
        for chat_id in self.get_need_chat_id(2):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –±–æ–ª—å—à–∏–º, —Ç–æ –¥–µ–ª–∏–º –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            # –∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É—è –∏—Ö —Å header_text –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for text in util.smart_split(split_alert_message, 4000):
                text_alert = header_text + text
                bot.send_message(chat_id, text_alert)

    def alert_failed(self, flag_branch):
        """
        –ê–ª–µ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏—è –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å

        :param flag_branch: –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–µ—Ç–∫–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Å–º–æ—Ç—Ä–∏–º –¥–∞–Ω–Ω—ã–µ (–ú–µ—Å—è—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ/–ì–æ–¥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
        :return:
        """
        bot = telebot.TeleBot(self.bot_token)
        for chat_id in self.get_need_chat_id(2):
            bot.send_message(chat_id, f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö {'–º–µ—Å—è—á–Ω—ã—Ö' if 'month' in flag_branch else '–≥–æ–¥–æ–≤—ã—Ö'} –¥–∞–Ω–Ω—ã—Ö –≤–Ω–µ—à–Ω–µ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ—Ç")

    @staticmethod
    def branch_func(t_id: str, name_s: str, name_f: str, dag_run) -> str:
        """
        –†–µ–∞–ª–∏–∑—É–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º –≤–µ—Ç–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º name_s, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ name_f

        :param t_id: id —Ç–∞—Å–∫–∞ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≤–∏—Å–∏—Ç –≤—ã–±–æ—Ä –≤–µ—Ç–≤–∏

        :param name_s: id —Ç–∞—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SUCCESS

        :param name_f: id —Ç–∞—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –ø—Ä–∏ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∫—Ä–æ–º–µ failed

        :param dag_run: dag_run –≤ –∫–æ—Ç–æ—Ä–æ–º –º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–∞—Å–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–≥–æ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        :return: id —Ç–∞—Å–∫–∞
        """
        state = dag_run.get_task_instance(t_id).state
        if state == State.SUCCESS:
            return name_s
        return name_f
